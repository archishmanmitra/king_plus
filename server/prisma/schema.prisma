// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  global_admin
  hr_manager
  manager
  employee
}

enum EmployeeStatus {
  active
  inactive
  terminated
}

enum AttendanceStatus {
  present
  absent
  late
  half_day
}

enum AttendanceMethod {
  biometric
  geo
  selfie
  manual
}

enum LeaveType {
  earned
  maternity
  paternity
  compoff
}

enum LeaveStatus {
  pending
  approved
  rejected
}

enum PayrollStatus {
  draft
  processing
  completed
  paid
}

enum ExpenseStatus {
  pending
  approved
  rejected
  paid
}

enum PerformanceReviewType {
  annual
  quarterly
  probation
  DEGREE360
}

enum PerformanceStatus {
  draft
  in_progress
  completed
}

enum GoalCategory {
  performance
  learning
  behavioral
  project
}

enum GoalStatus {
  not_started
  in_progress
  completed
  overdue
}

enum OKRStatus {
  draft
  active
  completed
}

enum ProjectStatus {
  planning
  active
  on_hold
  completed
  cancelled
}

enum ProjectPhaseStatus {
  Production
  PreProd
  PostProd
}

enum TaskStatus {
  todo
  in_progress
  review
  completed
}

enum TaskPriority {
  low
  medium
  high
  urgent
}

enum TimesheetStatus {
  draft
  submitted
  approved
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  password   String?
  role       UserRole
  avatar     String?
  employeeId String?   @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  employee   Employee? @relation(fields: [employeeId], references: [id])
  invitations UserInvitation[]

  @@map("users")
}

model Employee {
  id         String         @id @default(cuid())
  employeeId String         @unique
  joinDate   DateTime
  status     EmployeeStatus @default(active)
  avatar     String?

  // Core relations
  user        User?
  official    EmployeeOfficial?
  personal    EmployeePersonal?
  bankAccount BankAccount?
  retiral     EmployeeRetiral?
  addresses   Address[]
  passport    Passport?
  identity    IdentityNumbers?

  // Existing relations
  attendances        Attendance[]
  leaveRequests      LeaveRequest[]
  leaveBalance       LeaveBalance?
  payslips           Payslip[]
  expenseClaims      ExpenseClaim[]
  performanceReviews PerformanceReview[]
  goals              Goal[]
  okrs               OKR[]
  timesheetEntries   TimesheetEntry[]
  documents          Document[]
  timelineEvents     TimelineEvent[]
  dependents         Dependent[]
  educations         Education[]
  experiences        Experience[]
  invitations        UserInvitation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("employees")
}

// Employee Official Information - captured at creation
model EmployeeOfficial {
  id               String   @id @default(cuid())
  employeeId       String   @unique
  firstName        String
  lastName         String
  knownAs          String?
  designation      String?
  stream           String?
  subStream        String?
  baseLocation     String?
  currentLocation  String?
  unit             String?
  unitHead         String?
  jobConfirmation  Boolean  @default(false)
  confirmationDate DateTime?
  approval         String?
  rating           Float?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_officials")
}

// Employee Personal Information - completed via invitation
model EmployeePersonal {
  id                  String   @id @default(cuid())
  employeeId          String   @unique
  firstName           String?
  lastName            String?
  gender              String?
  dateOfBirth         DateTime?
  maritalStatus       String?
  nationality         String?
  primaryCitizenship  String?
  phoneNumber         String?
  personalEmail       String?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_personals")
}

enum AddressType {
  present
  primary
  emergency
}

model Address {
  id                 String      @id @default(cuid())
  employeeId         String
  type               AddressType
  contactName        String?
  address1           String?
  city               String?
  state              String?
  country            String?
  pinCode            String?
  mobileNumber       String?
  alternativeMobile  String?
  area               String?
  landmark           String?
  latitude           Float?
  longitude          Float?
  // Emergency-specific fields (used when type = emergency)
  relation           String?
  emergencyPhone     String?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Passport {
  id            String   @id @default(cuid())
  employeeId    String   @unique
  passportNumber String?
  expiryDate     DateTime?
  issuingOffice  String?
  issuingCountry String?
  contactNumber  String?
  address        String?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("passports")
}

model IdentityNumbers {
  id         String  @id @default(cuid())
  employeeId String  @unique
  aadhar     String?
  pan        String?
  nsrItpin   String?
  nsrTin     String?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("identity_numbers")
}

model BankAccount {
  id            String  @id @default(cuid())
  employeeId    String  @unique
  bankName      String?
  accountNumber String?
  ifscCode      String?
  country       String?
  modifiedDate  DateTime?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("bank_accounts")
}

model EmployeeRetiral {
  id                  String  @id @default(cuid())
  employeeId          String  @unique
  pfTotal             Float?  @default(0)
  employeePF          Float?  @default(0)
  employerPF          Float?  @default(0)
  employeeESI         Float?  @default(0)
  employerESI         Float?  @default(0)
  professionalTax     Float?  @default(0)
  incomeTax           Float?  @default(0)
  netTakeHome         Float?  @default(0)
  costToCompany       Float?  @default(0)
  basicSalary         Float?  @default(0)
  houseRentAllowance  Float?  @default(0)
  specialAllowance    Float?  @default(0)

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_retiral")
}

enum InvitationStatus {
  pending
  used
  expired
}

model UserInvitation {
  id            String           @id @default(cuid())
  token         String           @unique
  email         String
  role          UserRole
  employeeId    String?
  createdById   String
  status        InvitationStatus @default(pending)
  expiresAt     DateTime
  usedAt        DateTime?
  createdAt     DateTime         @default(now())

  employee Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  createdBy User      @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("user_invitations")
}

model Attendance {
  id             String            @id @default(cuid())
  employeeId     String
  date           DateTime
  clockIn        DateTime
  clockOut       DateTime?
  totalHours     Float             @default(0)
  overtimeHours  Float             @default(0)
  status         AttendanceStatus
  method         AttendanceMethod
  location       String?
  notes          String?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date])
  @@map("attendances")
}

model LeaveRequest {
  id           String       @id @default(cuid())
  employeeId   String
  employeeName String
  type         LeaveType
  startDate    DateTime
  endDate      DateTime
  days         Int
  reason       String
  status       LeaveStatus  @default(pending)
  approver     String?
  appliedDate  DateTime     @default(now())

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("leave_requests")
}

model LeaveBalance {
  employeeId String @id
  sick       Int   @default(0)
  vacation   Int   @default(0)
  personal   Int   @default(0)
  maternity  Int   @default(0)
  paternity  Int   @default(0)
  total      Int   @default(0)

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("leave_balances")
}

model PayrollRun {
  id             String        @id @default(cuid())
  month          String
  year           Int
  status         PayrollStatus @default(draft)
  totalEmployees Int           @default(0)
  totalAmount    Float         @default(0)
  createdDate    DateTime      @default(now())
  processedBy    String

  payslips Payslip[]

  @@unique([month, year])
  @@map("payroll_runs")
}

model Payslip {
  id           String  @id @default(cuid())
  employeeId   String
  employeeName String
  payrollRunId String
  month        String
  year         Int
  basicSalary  Float
  allowances   Json    // Array of SalaryComponent
  deductions   Json    // Array of SalaryComponent
  grossPay     Float
  netPay       Float
  taxDeducted  Float

  employee    Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  payrollRun  PayrollRun  @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)

  @@map("payslips")
}

model ExpenseClaim {
  id                    String        @id @default(cuid())
  employeeId            String
  employeeName          String
  category              String
  amount                Float
  description           String
  date                  DateTime
  status                ExpenseStatus @default(pending)
  approver              String?
  receipts              String[]      // Array of URLs
  reportingManager      String?
  fromDate              DateTime?
  toDate                DateTime?
  location              String?
  currency              String        @default("INR")
  billNumber            String?
  percentageOfOfficialUse Float       @default(100)
  vendor                String?
  comment               String?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("expense_claims")
}

model PerformanceReview {
  id            String                @id @default(cuid())
  employeeId    String
  employeeName  String
  reviewPeriod  String
  reviewType    PerformanceReviewType
  overallRating Float
  goals         Goal[]
  feedbacks     Feedback[]
  status        PerformanceStatus      @default(draft)
  reviewDate    DateTime
  reviewer      String

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("performance_reviews")
}

model Goal {
  id          String       @id @default(cuid())
  title       String
  description String
  category    GoalCategory
  targetDate  DateTime
  status      GoalStatus   @default(not_started)
  progress    Float        @default(0)
  weight      Float        @default(1)

  performanceReviewId String?
  employeeId          String?

  performanceReview PerformanceReview? @relation(fields: [performanceReviewId], references: [id], onDelete: Cascade)
  employee           Employee?          @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model Feedback {
  id            String @id @default(cuid())
  category      String
  rating        Float
  comments      String
  reviewer      String
  reviewerRole  String

  performanceReviewId String

  performanceReview PerformanceReview @relation(fields: [performanceReviewId], references: [id], onDelete: Cascade)

  @@map("feedbacks")
}

model OKR {
  id         String     @id @default(cuid())
  objective  String
  quarter    String
  year       Int
  owner      String
  status     OKRStatus  @default(draft)

  keyResults KeyResult[]
  employee   Employee   @relation(fields: [owner], references: [id], onDelete: Cascade)

  @@map("okrs")
}

model KeyResult {
  id          String  @id @default(cuid())
  description String
  target      Float
  current     Float   @default(0)
  unit        String
  progress    Float   @default(0)

  okrId String
  okr   OKR    @relation(fields: [okrId], references: [id], onDelete: Cascade)

  @@map("key_results")
}

model Project {
  id                   String              @id @default(cuid())
  name                 String
  description          String?
  client               String?
  status               ProjectStatus       @default(planning)
  startDate            DateTime?
  endDate              DateTime?
  budget               Float               @default(0)
  billableHours        Float               @default(0)
  nonBillableHours     Float               @default(0)
  teamMembers          String[]            // Array of employee IDs
  manager              String?
  progress             Float               @default(0)
  projectCode          String?
  phaseStatus          ProjectPhaseStatus?
  allocationPercentage Float               @default(100)
  reportingManager     String?

  tasks            Task[]
  timesheetEntries TimesheetEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

model Task {
  id             String       @id @default(cuid())
  projectId      String
  name           String
  description    String?
  assignee       String?      // Employee ID
  status         TaskStatus   @default(todo)
  priority       TaskPriority @default(medium)
  estimatedHours Float        @default(0)
  actualHours    Float        @default(0)
  billable       Boolean      @default(true)
  startDate      DateTime?
  dueDate        DateTime?

  project          Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timesheetEntries TimesheetEntry[]

  @@map("tasks")
}

model TimesheetEntry {
  id          String           @id @default(cuid())
  employeeId  String
  projectId   String
  taskId      String?
  date        DateTime
  hours       Float
  description String?
  billable    Boolean          @default(true)
  status      TimesheetStatus  @default(draft)

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task     Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@unique([employeeId, projectId, taskId, date])
  @@map("timesheet_entries")
}

model Document {
  id          String   @id @default(cuid())
  employeeId  String
  name        String
  type        String
  uploadDate  DateTime @default(now())
  size        String
  url         String
  uploadedBy  String   // 'employee' | 'hr' | 'admin'

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model TimelineEvent {
  id          String   @id @default(cuid())
  employeeId  String
  date        DateTime
  type        String   // 'joined' | 'promotion' | 'review' | 'leave' | 'training' | 'note'
  title       String
  description String
  isPrivate   Boolean  @default(false)

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("timeline_events")
}

model Dependent {
  id                   String @id @default(cuid())
  employeeId           String
  relation             String // 'father' | 'mother' | 'wife' | 'husband' | 'other'
  name                 String
  nationality          String
  dateOfBirth          DateTime
  occupation           String?
  relationEmployeeNumber String?
  passport             String?
  address              String?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("dependents")
}

model Education {
  id              String @id @default(cuid())
  employeeId      String
  branch          String
  instituteName   String
  passoutYear     String
  qualification   String
  universityName  String
  level           String // 'secondary' | 'higher' | 'ug' | 'pg'

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("educations")
}

model Experience {
  id                String   @id @default(cuid())
  employeeId        String
  country           String
  organisationName  String
  fromDate          DateTime
  toDate            DateTime?
  designation       String
  city              String
  documentProof     String?

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("experiences")
}
